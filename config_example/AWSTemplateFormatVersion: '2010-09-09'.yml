AWSTemplateFormatVersion: '2010-09-09'

Description:
  This template deploys a VPC, with a public subnet. It deploys an Internet 
  Gateway, with a default route on the public subnet. It deploys an EC2 instance 
  in the public subnet to serve as a bastion host.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: Bastion

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.0.0/16

  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.192.10.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: '%ami-43%'
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          /bin/echo '%password%' | /bin/passwd cloud_user --stdin
          yum update -y
          yum install -y git jq
          pip install --upgrade awscli
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_linux_amd64.tar.gz" | tar xz -C /tmp
          mv /tmp/eksctl /usr/local/bin
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin
          curl --silent -O "https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator"
          chmod +x ./aws-iam-authenticator
          mv ./aws-iam-authenticator /usr/local/bin
          mkdir -p /home/cloud_user/.aws
          touch /home/cloud_user/.aws/config
          echo "[default]" >> /home/cloud_user/.aws/config
          echo "region = us-east-1" >> /home/cloud_user/.aws/config
          touch /home/cloud_user/.aws/credentials
          echo "[default]" >> /home/cloud_user/.aws/credentials
          echo "aws_access_key_id = ${AccessKey}" >> /home/cloud_user/.aws/credentials
          echo "aws_secret_access_key = ${AccessKey.SecretAccessKey}" >> /home/cloud_user/.aws/credentials
          chown cloud_user:cloud_user /home/cloud_user/.aws/config
          chmod 600 /home/cloud_user/.aws/config
          chown cloud_user:cloud_user /home/cloud_user/.aws/credentials
          chmod 600 /home/cloud_user/.aws/credentials
          export PATH=/usr/local/bin:$PATH
          echo "WaitHandle: ${WaitHandle}"
          AWS_ACCESS_KEY_ID=${AccessKey} AWS_SECRET_ACCESS_KEY=${AccessKey.SecretAccessKey} AWS_REGION=us-east-1 /usr/local/bin/eksctl create cluster --region=us-east-1 --node-type=t2.medium --zones=us-east-1a,us-east-1b,us-east-1d --verbose=4 >> /var/log/eksctl.log 2>&1
          /opt/aws/bin/cfn-signal -e $? -r "eksctl complete" '${WaitHandle}'
          mkdir -p /home/cloud_user/.kube
          cp /.kube/config /home/cloud_user/.kube
          chown -R cloud_user:cloud_user /home/cloud_user/.kube
          chmod 600 /home/cloud_user/.kube/config
      Tags:
        - Key: Name
          Value: Bastion Host
  
  WaitHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle
    
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: EC2Instance
    Properties: 
      Handle: !Ref WaitHandle
      Timeout: '3600' # Wait up to 60 mins

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: cloud_user

Outputs:

  pubIpAddress1:
    Description: Public IP address of Bastion Host
    Value: !GetAtt EC2Instance.PublicIp

  pubIpAddress2:
    Description: cloud_user Access Key
    Value: !Ref AccessKey
  
  pubIpAddress3:
    Description: cloud_user Secret Access Key
    Value: !GetAtt AccessKey.SecretAccessKey
